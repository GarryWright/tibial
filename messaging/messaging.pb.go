// Code generated by protoc-gen-go.
// source: messaging.proto
// DO NOT EDIT!

/*
Package messaging is a generated protocol buffer package.

It is generated from these files:
	messaging.proto

It has these top-level messages:
	Message
	MessageReply
*/
package messaging

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The request message containing the user's name.
type Message struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the greetings
type MessageReply struct {
	Reply string `protobuf:"bytes,1,opt,name=reply" json:"reply,omitempty"`
}

func (m *MessageReply) Reset()                    { *m = MessageReply{} }
func (m *MessageReply) String() string            { return proto.CompactTextString(m) }
func (*MessageReply) ProtoMessage()               {}
func (*MessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Message)(nil), "messaging.Message")
	proto.RegisterType((*MessageReply)(nil), "messaging.MessageReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for SenderService service

type SenderServiceClient interface {
	// Sends a message
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageReply, error)
}

type senderServiceClient struct {
	cc *grpc.ClientConn
}

func NewSenderServiceClient(cc *grpc.ClientConn) SenderServiceClient {
	return &senderServiceClient{cc}
}

func (c *senderServiceClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := grpc.Invoke(ctx, "/messaging.SenderService/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SenderService service

type SenderServiceServer interface {
	// Sends a message
	SendMessage(context.Context, *Message) (*MessageReply, error)
}

func RegisterSenderServiceServer(s *grpc.Server, srv SenderServiceServer) {
	s.RegisterService(&_SenderService_serviceDesc, srv)
}

func _SenderService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SenderServiceServer).SendMessage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _SenderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.SenderService",
	HandlerType: (*SenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _SenderService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0xcf, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xc9, 0x72, 0xb1, 0xfb, 0x82, 0x39, 0xa9, 0x42, 0x42, 0x5c, 0x2c, 0x49, 0xf9, 0x29, 0x95, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x0a, 0x17, 0x0f, 0x54, 0x3a, 0x28, 0xb5,
	0x20, 0xa7, 0x52, 0x48, 0x84, 0x8b, 0xb5, 0x08, 0xc4, 0x80, 0x2a, 0x82, 0x70, 0x8c, 0x7c, 0xb9,
	0x78, 0x83, 0x53, 0xf3, 0x52, 0x52, 0x8b, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x6c,
	0xb8, 0xb8, 0x41, 0x02, 0x70, 0x93, 0xf5, 0x10, 0x2e, 0x80, 0x8a, 0x49, 0x89, 0x63, 0x8a, 0x81,
	0xad, 0x50, 0x62, 0x70, 0x32, 0xe6, 0x92, 0xc8, 0xcc, 0xd7, 0x4b, 0x2f, 0x2a, 0x48, 0xd6, 0x2b,
	0xc9, 0x4c, 0xca, 0x4c, 0xcc, 0x41, 0x28, 0x75, 0xe2, 0x0f, 0x01, 0x8b, 0xf8, 0xc2, 0x04, 0x02,
	0x18, 0x17, 0x31, 0x31, 0x7b, 0xf8, 0x84, 0x27, 0xb1, 0x81, 0xbd, 0x66, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xd5, 0x7c, 0xc7, 0x4e, 0xed, 0x00, 0x00, 0x00,
}
